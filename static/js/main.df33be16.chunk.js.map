{"version":3,"sources":["BookCards/BookCard/BookCard.js","BookCards/BookCards.js","NewItemForm/NewItemForm.js","Buttons/ButtonAddBook/ButtonAddBook.js","Buttons/ButtonClearStorage/ButtonClearStorage.js","Buttons/ButtonSaveStorage/ButtonSaveStorage.js","Buttons/ButtonLoadStorage/ButtonLoadStorage.js","App.js","serviceWorker.js","index.js"],"names":["bookCard","props","className","onClick","clickedDelete","title","author","pages","readStatus","bookCards","readStatusDisplay","books","map","book","index","key","newItemForm","id","exitClick","data-type","type","placeholder","value","onChange","changed","name","defaultChecked","addBook","buttonAddBook","style","display","fontSize","margin","padding","clicked","buttonClearStorage","buttonSaveStorage","buttonLoadStorage","App","state","defaultBooks","formData","formDisplayOn","updateFormData","event","fieldSelector","target","dataset","formDataClone","setState","submitClickHandler","includes","Error","newBooks","newCard","push","toggleForm","cardDeleteHandler","splice","updateStorage","window","localStorage","setItem","JSON","stringify","loadStorage","parse","storedState","clearStorage","confirm","location","reload","bookForm","this","e","ButtonAddBook","BookCards","ButtonSaveStorage","ButtonLoadStorage","ButtonClearStorage","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df33be16.chunk.js","sourcesContent":["import React from 'react';\nimport './BookCard.css';\n\nconst bookCard = (props) => {\n  return (\n    <div className='BookCard'>\n      <button \n        className='deleteButton'\n        onClick={props.clickedDelete}>X</button>\n      <h2>Book: {props.title}</h2>\n      <p>Author: {props.author}</p>\n      <p>Pages: {props.pages}</p>\n      <p>Finished Reading: {props.readStatus}</p>\n    </div>\n  )\n}\n\nexport default bookCard","import React from 'react';\nimport BookCard from './BookCard/BookCard';\n\nconst bookCards = (props) => {\n\n  let readStatusDisplay = 'False';\n\n  return (props.books.map((book, index) => {\n    book.readStatus === true ? readStatusDisplay = 'True' : readStatusDisplay = 'False';\n    return <BookCard\n      clickedDelete={() => props.clickedDelete(index)}\n      title={book.title}\n      key={book.title}\n      author={book.author}\n      pages={book.pages}\n      readStatus={readStatusDisplay}\n    />\n  })\n  )\n}\nexport default bookCards","import React from 'react';\nimport './NewItemForm.css'\n\nconst newItemForm = (props) => {\n  return (\n    <form className='NewItemForm'>\n      <button id='exit-button'\n        onClick={props.exitClick}>EXIT</button>\n      <div>\n        <input\n          data-type='title'\n          className='textInput'\n          type='text'\n          placeholder='Enter Title'\n          value={props.title}\n          onChange={props.changed}\n        >\n        </input>\n\n        <input\n          data-type='author'\n          className='textInput'\n          type='text'\n          placeholder='Enter Author'\n          value={props.author}\n          onChange={props.changed}\n        ></input>\n\n        <input\n          data-type='pages'\n          className='textInput'\n          type='text'\n          placeholder='Enter # of pages'\n          value={props.pages}\n          onChange={props.changed}\n        ></input>\n\n      </div>\n      <div>\n        <input\n          data-type='readStatus'\n          type='radio'\n          name='read-status'\n          value={true}\n          defaultChecked={props.readStatus === true}\n          onClick={props.changed} />Read\n        <input\n          data-type='readStatus'\n          type='radio'\n          name='read-status'\n          value={false}\n          defaultChecked={props.readStatus === false}\n          onClick={props.changed} />Unread\n      </div>\n      <button\n        type='button'\n        onClick={props.addBook}>Add</button>\n    </form>\n  )\n}\n\nexport default newItemForm;","import React from 'react';\n\nconst buttonAddBook = (props) => {\n  const styleConst = {\n    display: 'block',\n    fontSize: '20px',\n    margin: '20px auto',\n    padding: '6px',\n  }\n\n  return (\n    <button\n      style={styleConst}\n      onClick={props.clicked}\n    >Add Book</button>\n  )\n}\n\nexport default buttonAddBook;\n","import React from 'react';\n\nconst buttonClearStorage = (props) => {\n  const styleConst = {\n    display: 'inline-block',\n    fontSize: '20px',\n    margin: '20px auto 20px 20px',\n    padding: '6px',\n  }\n  return (\n    <button style={styleConst}\n      onClick={props.clicked}>Clear Storage</button>\n  )\n}\n\nexport default buttonClearStorage;\n","import React from 'react';\n\nconst buttonSaveStorage = (props) => {\n  const styleConst = {\n    display: 'inline-block',\n    fontSize: '20px',\n    margin: '20px auto 20px 20px',\n    padding: '6px',\n  }\n  return (\n    <button style={styleConst}\n      onClick={props.clicked}>Save Changes</button>\n  )\n}\n\nexport default buttonSaveStorage;\n","import React from 'react';\n\nconst buttonLoadStorage = (props) => {\n  const styleConst = {\n    display: 'inline-block',\n    fontSize: '20px',\n    margin: '20px auto 20px 20px',\n    padding: '6px',\n  }\n  return (\n    <button style={styleConst}\n      onClick={props.clicked}>Load Storage</button>\n  )\n}\n\nexport default buttonLoadStorage;","import React, { Component } from 'react';\nimport './App.css';\n\nimport BookCards from './BookCards/BookCards';\nimport NewItemForm from './NewItemForm/NewItemForm';\nimport ButtonAddBook from './Buttons/ButtonAddBook/ButtonAddBook';\nimport ButtonClearStorage from './Buttons/ButtonClearStorage/ButtonClearStorage';\nimport ButtonSaveStorage from './Buttons/ButtonSaveStorage/ButtonSaveStorage';\nimport ButtonLoadStorage from './Buttons/ButtonLoadStorage/ButtonLoadStorage';\n\nclass App extends Component {\n  state = {\n    books: [\n      {\n        title: 'test',\n        author: 'Mr. Author',\n        pages: '142',\n        readStatus: true\n      },\n      {\n        title: 'Test Number 2',\n        author: 'Mrs. Author',\n        pages: '155',\n        readStatus: false\n      },\n    ],\n    defaultBooks: [\n      {\n        title: 'test',\n        author: 'Mr. Author',\n        pages: '142',\n        readStatus: true\n      },\n      {\n        title: 'Test Number 2',\n        author: 'Mrs. Author',\n        pages: '155',\n        readStatus: false\n      },\n    ],\n    formData: {\n      title: null,\n      author: null,\n      pages: null,\n      readStatus: true\n    },\n    formDisplayOn: false,\n  }\n\n  updateFormData = (event) => {\n    let fieldSelector = event.target.dataset.type\n    const formDataClone = { ...this.state.formData }\n    formDataClone[fieldSelector] = event.target.value;\n    if (fieldSelector === 'readStatus') {\n      formDataClone[fieldSelector] = (formDataClone[fieldSelector] === 'true')\n    }\n\n    this.setState({\n      formData: formDataClone\n    })\n  }\n\n  submitClickHandler = () => {\n    let previousTitles = this.state.books.map(book => book.title)\n    if (previousTitles.includes(this.state.formData.title)) {\n      throw Error('Title already in use, not permitted since name is used as key.')\n    }\n\n    let newBooks = [...this.state.books];\n    let newCard = {\n      title: this.state.formData.title,\n      author: this.state.formData.author,\n      pages: this.state.formData.pages,\n      readStatus: this.state.formData.readStatus\n    }\n    newBooks.push(newCard);\n\n    this.setState({\n      books: newBooks\n    });\n    this.toggleForm()\n  }\n\n  toggleForm = () => {\n    this.setState({\n      formDisplayOn: !this.state.formDisplayOn\n    })\n  }\n\n  cardDeleteHandler = (index) => {\n    const newBooks = [...this.state.books];\n    newBooks.splice(index, 1);\n    this.setState({ books: newBooks });\n  }\n\n  updateStorage = () => {\n    window.localStorage.setItem('storedState', JSON.stringify(this.state.books))\n  }\n\n  loadStorage = () => {\n    const newBooks = JSON.parse(localStorage.storedState)\n    this.setState({ books: newBooks })\n  }\n\n  clearStorage = () => {\n    if (window.confirm('Are you sure you want to reset all data?') === true) {\n      this.setState({ books: this.state.defaultBooks });\n    }\n    window.localStorage.setItem('storedState', JSON.stringify(this.state.defaultBooks))\n    window.location.reload();\n  }\n\n  render() {\n\n    let bookForm = null;\n\n    if (this.state.formDisplayOn) {\n      bookForm = (\n        <NewItemForm\n          title={this.state.formData.title}\n          author={this.state.formData.author}\n          pages={this.state.formData.pages}\n          readStatus={this.state.formData.readStatus}\n          changed={(e) => this.updateFormData(e)}\n          exitClick={this.toggleForm}\n          addBook={this.submitClickHandler}\n        />\n      )\n    }\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Welcome to Your Library!</h1>\n        </header>\n        <div>\n          <ButtonAddBook\n            clicked={() => this.toggleForm()}\n          />\n          {bookForm}\n          <BookCards\n            books={this.state.books}\n            clickedDelete={this.cardDeleteHandler} />\n          <div id='button-container'>\n            <ButtonSaveStorage\n              clicked={() => this.updateStorage()} />\n            <ButtonLoadStorage\n              clicked={() => this.loadStorage()} />\n            <ButtonClearStorage\n              clicked={() => this.clearStorage()} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}